.TH mkfs.xfs 8
.SH NAME
mkfs.xfs \- construct an XFS filesystem
.SH SYNOPSIS
.nf
\f3mkfs.xfs\f1 [ \f3\-b\f1 subopt=value ] [ \f3\-d\f1 subopt[=value] ]
	[ \f3\-i\f1 subopt=value ] [ \f3\-l\f1 subopt[=value] ] [ \f3\-f\f1 ]
	[ \f3\-n\f1 subopt[=value] ] [ \f3\-p\f1 protofile ] [ \f3\-q\f1 ]
	[ \f3\-r\f1 subopt[=value] ] [ \f3\-s\f1 subopt[=value] ]
	[ \f3\-N\f1 ] [ \f3\-L\f1 label ] device
.fi
.SH DESCRIPTION
.I mkfs.xfs
constructs an XFS filesystem by writing on a special
file using the values found in the arguments of the command line.
It is invoked automatically by \f2mkfs\f1(8) when \f2mkfs\f1 is
given the \f3\-t xfs\f1 option.
.PP
In its simplest (and most commonly used form), the size of the
filesystem is determined from the disk driver.  As an example, to make
a filesystem with an internal log on the first partition on the first
SCSI disk, use:
.PP
.nf
	mkfs.xfs /dev/sda1
.fi
.PP
The metadata log can be placed on another device to reduce the number
of disk seeks.  To create a filesystem on the first partition on the
first SCSI disk with a 10000 block log located on the first partition
on the second SCSI disk, use:
.PP
.nf
	mkfs.xfs -l logdev=/dev/sdb1,size=10000b /dev/sda1
.fi
.PP
Each of the
.I subopt=value
elements in the argument list above can be given as multiple comma-separated
.I subopt=value
suboptions if multiple suboptions apply to the same option.
Equivalently, each main option can be given multiple times with
different suboptions.
For example,
.B \-l internal,size=10000b
and
.B \-l internal \-l size=10000b
are equivalent.
.PP
In the descriptions below, sizes are given in sectors, bytes, blocks, 
kilobytes, megabytes, or gigabytes.
Sizes are treated as hexadecimal if prefixed by 0x or 0X,
octal if prefixed by 0, or decimal otherwise.
If suffixed with \f3s\f1 then the size is converted by multiplying it
by the filesystems sector size (defaults to 512, see \f3\-s\f1 option below).
If suffixed with \f3b\f1 then the size is converted by multiplying it
by the filesystems block size (defaults to 4K, see \f3\-b\f1 option below).
If suffixed with \f3k\f1 then the size is converted by multiplying it by 1024.
If suffixed with \f3m\f1 then the size is converted by multiplying it by
1048576 (1024 * 1024).
If suffixed with \f3g\f1 then the size is converted by multiplying it by
1073741824 (1024 * 1024 * 1024).
.TP
.B \-b
Block size options.
.IP
This option specifies the fundamental block size of the filesystem.
The valid suboptions are:
.BI log= value
and
\f3size=\f1\f2value\f1;
only one can be supplied.
The block size is specified either as a base two logarithm value with
.BR log= ,
or in bytes with
.BR size= .
The default value is 4096 bytes (4 KB), the minimum is 512, and the
maximum is 65536 (64 KB).
XFS on Linux currently only supports pagesize or smaller blocks.
.TP
.B \-d
Data section options.
.IP
These options specify the location, size, and other parameters of the
data section of the filesystem.
The valid suboptions are:
\f3agcount=\f1\f2value\f1,
\f3agsize=\f1\f2value\f1,
\f3file\f1[\f3=\f1\f2value\f1],
\f3name=\f1\f2value\f1,
\f3size=\f1\f2value\f1,
\f3sunit=\f1\f2value\f1,
\f3swidth=\f1\f2value\f1,
\f3su=\f1\f2value\f1,
\f3sw=\f1\f2value\f1,
and
\f3unwritten\f1[\f3=\f1\f2value\f1].
.IP
The
.B agcount
suboption is used to specify the number of allocation groups.
The data section of the filesystem is divided into allocation groups
to improve the performance of XFS.
More allocation groups imply that more parallelism can be achieved
when allocating blocks and inodes.
The minimum allocation group size is 16 MB;
the maximum size is just under 4 GB.
The data section of the filesystem is divided into
.I agcount
allocation groups (default value 8, unless the filesystem is smaller
than 128 MB or larger than 8 GB).
Setting
.I agcount
to a very large number should be avoided, since this causes an unreasonable
amount of CPU time to be used when the filesystem is close to full.
.IP
The
.B agsize
suboption is an alternative to using
.B agcount.
The argument provided to
.B agsize
is the desired size of the allocation group expressed in bytes
(usually using the \f3m\f1 or \f3g\f1 suffixes).
This value must be a multiple of the filesystem block size, and
must be at least 16MB, and no more than 4GB, and may
be automatically adjusted to properly align with the stripe geometry.
The
.B agcount
suboption and the
.B agsize
suboption are mutually exclusive.
.IP
The
.B name
suboption can be used to specify the name of the special file containing
the filesystem.
In this case, the log section must be specified as
.B internal
(with a size, see the
.B \-l
option below) and there can be no real-time section.
.IP
The
.B file
suboption is used to specify that the file given by the
.B name
suboption is a regular file.
The suboption value is either 0 or 1,
with 1 signifying that the file is regular.
This suboption is used only to make a filesystem image.
If the value is omitted then 1 is assumed.
.IP
The
.B size
suboption is used to specify the size of the data section.
This suboption is required if
.B \-d file[=1]
is given.
Otherwise, it is only needed if the filesystem should occupy
less space than the size of the special file.
.IP
The
.B sunit
suboption is used to specify the stripe unit for a RAID device or a
logical volume.
The suboption value has to be specified in 512-byte block units.
Use the
.B su
suboption to specify the stripe unit size in bytes.
This suboption ensures that data allocations will be stripe unit aligned
when the current end of file is being extended and the file size is larger
than 512KB.
Also inode allocations and the internal log will be stripe unit aligned.
.IP
The
.B su
suboption is an alternative to using
.B sunit.
The
.B su
suboption is used to specify the stripe unit for a RAID device or a
striped logical volume.
The suboption value has to be specified in bytes,
(usually using the \f3m\f1 or \f3g\f1 suffixes).
This value must be a multiple of the filesystem block size.
.IP
The
.B swidth
suboption is used to specify the stripe width for a RAID device or a
striped logical volume.
The suboption value has to be specified in 512-byte block units.
Use the
.B sw
suboption to specify the stripe width size in bytes.
This suboption is required if
.B \-d sunit
has been specified and it has to be a multiple of the 
.B \-d sunit 
suboption.
The stripe width will be the preferred iosize returned in the 
.IR stat (2)
system call.
.IP
The
.B sw
suboption is an alternative to using
.B swidth.
The
.B sw
suboption is used to specify the stripe width for a RAID device or
striped logical volume.
The suboption value is expressed as a multiplier of the stripe unit,
usually the same as the number of stripe members in the logical
volume configuration, or data disks in a RAID device.
.IP
When a filesystem is created on a logical volume device,
.I mkfs.xfs
will automatically query the logical volume for appropriate 
.B sunit
and
.B swidth
values.
.IP
The
.B unwritten
suboption is used to specify whether unwritten extents are flagged as such,
or not.
The suboption value is either 0 or 1, with 1 signifying that unwritten
extent flagging should occur.
If the suboption is omitted, unwritten extent flagging is enabled.
If unwritten extents are flagged, filesystem write performance
will be negatively affected for preallocated file extents, since
extra filesystem transactions are required to convert extent flags 
for the range of the file written.
This suboption should be disabled if the filesystem
needs to be used on operating system versions which do not support the
flagging capability.
.TP
.B \-f
Force overwrite when an existing filesystem is detected on the device.
By default, 
.I mkfs.xfs
will not write to the device if it suspects that there is a filesystem
or partition table on the device already.
.TP
.B \-i
Inode options.
.IP
This option specifies the inode size of the filesystem, and other
inode allocation parameters.
The XFS inode contains a fixed-size part and a variable-size part.
The variable-size part, whose size is affected by this option, can contain:
directory data, for small directories;
attribute data, for small attribute sets;
symbolic link data, for small symbolic links;
the extent list for the file, for files with a small number of extents;
and the root of a tree describing the location of extents for the file,
for files with a large number of extents.
.IP
The valid suboptions for specifying inode size are:
\f3log=\f1\f2value\f1,
\f3perblock=\f1\f2value\f1,
and
\f3size=\f1\f2value\f1;
only one can be supplied.
The inode size is specified either as a base two logarithm value with
.BR log= ,
in bytes with
.BR size= ,
or as the number fitting in a filesystem block with
.BR perblock= .
The mininum (and default) value is 256 bytes.
The maximum value is 2048 (2 KB) subject to the restriction that
the inode size cannot exceed one half of the filesystem block size.
.IP
XFS uses 64-bit inode numbers internally; however, the number of
significant bits in an inode number
is affected by filesystem geometry.  In
practice, filesystem size and inode size are the predominant factors.
The Linux kernel and most applications cannot currently handle
inode numbers greater than 32 significant bits, so if no
inode size is given on the command line, 
.I mkfs.xfs
will attempt to choose a size
such that inode numbers will be < 32 bits.  If an inode size
is specified, or if a filesystem is sufficently large,
.I mkfs.xfs
will warn if this will create inode numbers > 32 significant
bits.
.IP
The option \f3maxpct=\f1\f2value\f1 specifies the maximum percentage
of space in the filesystem that can be allocated to inodes.
The default value is 25%.
Setting the value to 0 means that
essentially all of the filesystem can become inode blocks.
.IP
The option
.BI align[= value ]
is used to specify that inode allocation is or is not aligned.
The value is either 0 or 1,
with 1 signifying that inodes are allocated aligned.
If the value is omitted, 1 is assumed.
The default is that inodes are aligned.
Aligned inode access is normally more efficient than unaligned access;
alignment must be established at the time the filesystem is created,
since inodes are allocated at that time.
This option can be used to turn off inode alignment when the
filesystem needs to be mountable by a version of IRIX
that does not have the inode alignment feature
(any release of IRIX before 6.2, and IRIX 6.2 without XFS patches).
.TP
.B \-l
Log section options.
.IP
These options specify the location, size, and other parameters of the
log section of the filesystem.
The valid suboptions are:
.BI internal[= value ],
\f3logdev=\f1\f2device\f1,
\f3size=\f1\f2value\f1,
\f3version=\f1\f2[1|2]\f1,
\f3sunit=\f1\f2value\f1, and
\f3su=\f1\f2value\f1.
.IP
The
.B internal
suboption is used to specify that the log section is a piece of
the data section instead of being another device or logical volume.
The suboption value is either 0 or 1,
with 1 signifying that the log is internal.
If the value is omitted, 1 is assumed.
.IP
The
.B logdev
suboption is used to specify that the log section should reside on a
device separate from the data section.  The suboption value is the
name of a block device.  The
.B internal=1
and
.B logdev
options are mutually exclusive.
.IP
The
.B size
suboption is used to specify the size of the log section.
.IP
If the log is contained within the data section and 
.B size
isn't specified,
.I mkfs.xfs
will try to select a suitable log size depending
on the size of the filesystem.  The actual logsize depends on the
filesystem block size and the directory block size.
.IP
Otherwise, the
.B size
suboption is only needed if the log section of the filesystem
should occupy less space than the size of the special file.
The size is specified in bytes or blocks, with a \f3b\f1 suffix 
meaning multiplication by the filesystem block size, as described above.
The overriding minimum value for size is 512 blocks.
With some combinations of filesystem block size, inode size,
and directory block size, the minimum log size is larger than 512 blocks.
.IP
Using the
.B version
suboption to specify a version 2 log enables the
.B sunit
suboption, and allows the logbsize to be increased beyond 32K.
Version 2 logs are automatically selected if a log stripe unit
is specified.  See \f3sunit\f1 and \f3su\f1 suboptions, below.
.IP
The
.B sunit 
suboption specifies the alignment to be used for log writes.
The suboption value has to be specified in 512-byte block units.
Use the
.B su
suboption to specify the log stripe unit size in bytes.
Log writes will be aligned on this boundary,
and rounded up to this boundary.
This gives major improvements in performance on some configurations
such as software raid5 when the sunit is specified as the filesystem
block size.
The equivalent byte value must be a multiple of the filesystem block
size.
Version 2 logs are automatically selected if the log \f3su\f1
suboption is specified.
.IP
The
.B su
suboption is an alternative to using
.B sunit.
The
.B su
suboption is used to specify the log stripe.
The suboption value has to be specified in bytes,
(usually using the \f3s\f1 or \f3b\f1 suffixes).
This value must be a multiple of the filesystem block size.
Version 2 logs are automatically selected if the log \f3su\f1
suboption is specified.
.TP
.B \-n
Naming options.
.IP
These options specify the version and size parameters for the naming
(directory) area of the filesystem.
The valid suboptions are:
\f3log=\f1\f2value\f1,
\f3size=\f1\f2value\f1,
and
\f3version=\f1\f2value\f1.
The naming (directory) version is 1 or 2,
defaulting to 2 if unspecified.
With version 2 directories,
the directory block size can be any power of 2 size
from the filesystem block size up to 65536.
The block size is specified either as a base two logarithm value with
.BR log= ,
or in bytes with
.BR size= .
The default size value for version 2 directories is 4096 bytes (4 KB), 
unless the filesystem block size is larger than 4096,
in which case the default value is the filesystem block size.
For version 1 directories the block size is the same as the 
filesystem block size.
.TP
\f3\-p\f1 \f2protofile\f1
If the optional
.B \-p
.I protofile
argument is given,
.I mkfs.xfs
uses
.I protofile
as a prototype file
and takes its directions from that file.
The blocks and inodes
specifiers in the
.I protofile
are provided for backwards compatibility, but are otherwise unused.
The syntax of the protofile is defined by a number of tokens separated by spaces
or newlines. Note that the line numbers are not part of the syntax but
are meant to help you in the
following discussion of the file
contents.
.nf
.sp .8v
.in +5
\f71       /stand/\f1\f2diskboot\f1\f7
2       4872 110
3       d--777 3 1
4       usr     d--777 3 1
5       sh      ---755 3 1 /bin/sh
6       ken     d--755 6 1
7               $
8       b0      b--644 3 1 0 0
9       c0      c--644 3 1 0 0
10      fifo    p--644 3 1
11      slink   l--644 3 1 /a/symbolic/link
12      :  This is a comment line
13      $
14      $\f1
.in -5
.fi
.IP
Line 1 is a dummy string.
(It was formerly the bootfilename.)
It is present for backward
compatibility; boot blocks are not used on SGI systems.
.IP
Note that some string of characters must be present as the first line of
the proto file to cause it to be parsed correctly; the value
of this string is immaterial since it is ignored.
.IP
Line 2 contains two numeric values (formerly the numbers of blocks and inodes).
These are also merely for backward compatibility: two numeric values must
appear at this point for the proto file to be correctly parsed,
but their values are immaterial since they are ignored.
.IP
The lines 3 through 11 specify the files and directories you want to 
include in this filesystem. Line 3 defines the
root directory. Other directories and
files that you want in the filesystem
are indicated by lines 4 through 6 and
lines 8 through 10. Line 11 contains
symbolic link syntax.
.IP
Notice the dollar sign (
.B $
) syntax on line 7. This syntax directs the 
.I mkfs.xfs 
command to terminate the branch of the filesystem it
is currently on and then continue
from the directory specified by 
the next line,in this case line 8
It must be the last character
on a line.
The colon
on line 12 introduces a comment; all characters up until the
following newline are ignored.
Note that this means you cannot
have a file in a prototype file whose name contains a colon.
The
.B $
on lines 13 and 14 end the process, since no additional
specifications follow.
.IP
File specifications provide the following:
.IP
  * file mode
.br
  * user ID
.br
  * group ID
.br
  * the file's beginning contents
.P
.IP
A 6-character string defines the mode for
a file. The first character of this string
defines the file type. The character range
for this first character is 
.B \-bcdpl.
A file may be a regular file, a block special file,
a character special file, directory files, named
pipes (first-in, first out files), and symbolic
links.
The second character of the mode string is
used to specify setuserID mode, in which case
it is 
.BR u .
If setuserID mode is not specified, the second character is 
.BR \- .
The third character of the mode string is
used to specify the setgroupID mode, in which
case it is 
.BR g .
If setgroupID mode is not specified, the second character is 
.BR \- .
The remaining characters of the mode string are
a three digit octal number. This octal number
defines the owner, group, and other read, write,
and execute permissions for the file, respectively.
Form more information on file permissions, see the
.IR chmod(1) 
command.
.IP
Following the mode character string are two
decimal number tokens that specify the user and group IDs
of the file's owner.
.IP
In a regular file, the next token specifies the
pathname from which the contents and size of the
file are copied.
In a block or character special file, the next token
are two decimal numbers that specify the major and minor
device numbers.
When a file is a symbolic link, the next token
specifies the contents of the link.

When the file is a directory, the 
.I mkfs.xfs 
command creates the entries 
.B dot
(.) and 
.B dot-dot
(..) and then reads the list of names and file specifications
in a recursive manner for all of the entries
in the directory. A scan of the protofile is
always terminated with the dollar (
.B $
) token.
.TP
.B \-q
Quiet option.
.IP
Normally
.I mkfs.xfs
prints the parameters of the filesystem
to be constructed;
the
.B \-q
flag suppresses this.
.TP
.B \-r
Real-time section options.
.IP
These options specify the location, size, and other parameters of the
real-time section of the filesystem.
The valid suboptions are:
\f3rtdev=\f1\f2device\f1,
\f3extsize=\f1\f2value\f1,
and
\f3size=\f1\f2value\f1.
.IP
The
.B rtdev
suboption is used to specify the device which should contain
the real-time section of the filesystem.
The suboption value is the name of a block device.
.IP
The
.B extsize
suboption is used to specify the size of the blocks in the real-time
section of the filesystem.
This size must be a multiple of the filesystem block size.
The minimum allowed value is the filesystem block size
or 4 KB (whichever is larger);
the default value is the stripe width for striped volumes or 64 KB for
non-striped volumes;
the maximum allowed value is 1 GB.
The real-time extent size should be carefully chosen to match the
parameters of the physical media used.
.IP
The
.B size
suboption is used to specify the size of the real-time section.
This suboption is only needed if the real-time section of the
filesystem should occupy less space than the size of the partition
or logical volume containing the section.
.TP
.B \-s
Sector size options.
.IP
This option specifies the fundamental sector size of the filesystem.
The valid suboptions are:
.BI log= value
and
\f3size=\f1\f2value\f1;
only one can be supplied.
The sector size is specified either as a base two logarithm value with
.BR log= ,
or in bytes with
.BR size= .
The default value is 512 bytes.
The minimum value for sector size is 512; the maximum is 32768 (32 KB).
The sector size must be a power of 2 size and cannot be made larger
than the filesystem block size.
.TP
\f3\-L\f1 \f2label\f1
Set the filesystem label.
XFS filesystem labels can be at most 12 characters long; if
.I label
is longer than 12 characters,
.I mkfs.xfs
will not proceed with creating the filesystem.  Refer to the
.IR mount (8)
and
.IR xfs_admin (8)
manual entries for additional information.
.TP
.B \-N
Causes the file system parameters to be printed out without really
creating the file system.
.SH SEE ALSO
xfs(5),
mkfs(8),
mount(8),
xfs_info(8),
xfs_admin(8).
.SH BUGS
With a prototype file, it is not possible to specify hard links.
