.TH xfs_copy 8
.SH NAME
xfs_copy \- copy the contents of an XFS filesystem
.SH SYNOPSIS
.nf
\f3xfs_copy\f1 [ \f3\-bd\f1 ] [ \f3\-L\f1 log ] source target1 [ target2 target3 ... ]
.fi
.SH DESCRIPTION
.I xfs_copy
copies an XFS filesystem to one or more targets in parallel
(see
.IR xfs (5)).
The
first (source)
argument must be the pathname of the device or file
containing the XFS filesystem.
The remaining arguments specify one or more target devices
or file names.
If the pathnames specify devices, a copy of the source
XFS filesystem is created on each device.
The target can also be the name of a regular file,
in which case an image of the source XFS filesystem is
created in that file.
If the file does not exist,
.I xfs_copy
creates the file.
The length of the resulting file is equal to the size
of the source filesystem.
However, if the file is created on an XFS filesystem,
the file consumes roughly the amount of space actually
used in the source filesystem by the filesystem and the XFS log.
The space saving is because
.I xfs_copy
seeks over free blocks instead of copying them
and the XFS filesystem supports sparse files efficiently.
.PP
.I xfs_copy
should only be used to copy unmounted filesystems, read-only mounted
filesystems, or frozen filesystems (see xfs_freeze(8)).
Otherwise, the generated filesystem(s) would be inconsistent
or corrupt.
.PP
.I xfs_copy
does not alter the source filesystem in any way.
Each new (target) filesystem is identical to the original
filesystem except that new filesystems each have a new unique
filesystem identifier (UUID).
Therefore,
if both the old and new filesystems will be used as
separate distinct filesystems,
.I xfs_copy
or
.IR xfsdump / xfsrestore
should be used to generate the new filesystem(s) instead of
.IR dd (1)
or other programs that do block-by-block disk copying.
.PP
The
.B \-d
(duplicate) option can be used if a true clone is
desired.
This should be done only if the new filesystem
will be used as a replacement for the original
filesystem (such as in the case of disk replacement).
.PP
.I xfs_copy
uses synchronous writes to ensure that write errors are
detected.
.PP
The
.B \-b
(buffered) option can be used to ensure direct IO is not attempted
to any of the target files.
This is useful when the filesystem holding the target file does not
support direct IO.
.I xfs_copy
also uses
\f2pthreads\f1s
to perform simultaneous parallel writes.
.I xfs_copy
creates one additional thread for each target to be written.
All threads die if
.I xfs_copy
terminates or aborts.
.PP
.I xfs_copy
does not copy XFS filesystems that have a real-time section
or XFS filesystems with external logs.
In both cases,
.I xfs_copy
aborts with an error message.
.SH DIAGNOSTICS
.I xfs_copy
reports errors to both stderr and
in more detailed form to a generated
log file whose name is of the form
.I /var/tmp/xfs_copy.log.XXXXXX
or a log file specified by the
.B \-L
option.
If
.I xfs_copy
detects a write error on a target,
the copy of that one target is aborted and an error
message is issued to both stderr and the log file, but
the rest of the copies continue.
When
.I xfs_copy
terminates, all aborted targets are reported to both stderr and
the log file.
.PP
If all targets abort or if there is an error reading the source filesystem,
.I xfs_copy
immediately aborts.
.PP
.I xfs_copy
returns an exit code of 0 if all targets are successfully
copied and an exit code of 1 if any target fails.
.SH NOTES
When moving filesystems from one disk to another,
if the original filesystem is significantly smaller
than the new filesystem, and will be made larger, we
recommend that
.I
mkfs
and
.I xfsdump/xfsrestore
be used instead of using
.I xfs_copy
and
.I xfs_growfs.
The filesystem layout resulting from using
.I xfs_copy/xfs_growfs
is almost always worse than the result of using
.I mkfs/xfsdump/xfsrestore
but in the case of small filesystems, the
differences can have a significant performance
impact.
This is due to the way
.I xfs_growfs
works, and not due to any shortcoming in
.I xfs_copy
itself.
.SH SEE ALSO
mkfs.xfs(8),
xfsdump(8),
xfsrestore(8),
xfs_freeze(8),
xfs_growfs(8),
xfs(5).
